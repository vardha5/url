<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Profile</title>
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
  <link rel="manifest" href="/site.webmanifest" />
  <meta name="twitter:creator" content="@yourtwitterhandle" />
  <!-- Bootstrap CSS CDN -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet" />
  <!-- Font Awesome for icons -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" />
  <style>
    body {
      background-color: #f5f8fa;
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }

    .profile-card {
      background-color: white;
      border-radius: 15px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      transition: transform 0.3s ease;
    }

    .profile-card:hover {
      transform: translateY(-5px);
    }

    .profile-cover {
      height: 180px;
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      position: relative;
    }

    .profile-avatar {
      width: 150px;
      height: 150px;
      border-radius: 50%;
      border: 5px solid white;
      position: absolute;
      bottom: -75px;
      left: 50%;
      transform: translateX(-50%);
      box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    }

    .profile-info {
      margin-top: 85px;
      text-align: center;
      padding: 20px 30px 30px;
    }

    .profile-name {
      margin-bottom: 5px;
      font-weight: 700;
      color: #333;
    }

    .profile-title {
      color: #6c757d;
      margin-bottom: 15px;
    }

    .profile-bio {
      color: #495057;
      margin-bottom: 25px;
    }

    .profile-stats {
      display: flex;
      justify-content: space-around;
      margin-bottom: 25px;
      padding: 15px 0;
      border-top: 1px solid #eee;
      border-bottom: 1px solid #eee;
    }

    .stat-item {
      text-align: center;
    }

    .stat-value {
      font-weight: 700;
      font-size: 20px;
      color: #333;
    }

    .stat-label {
      font-size: 14px;
      color: #6c757d;
    }

    .social-links {
      margin-bottom: 25px;
    }

    .social-links a {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      color: white;
      background-color: #6c757d;
      margin: 0 5px;
      transition: all 0.3s ease;
      text-decoration: none;
    }

    .social-links a:hover {
      transform: scale(1.1);
    }

    .social-twitter {
      background-color: #1da1f2;
    }

    .social-linkedin {
      background-color: #0077b5;
    }

    .social-github {
      background-color: #333;
    }

    .social-instagram {
      background-color: #e1306c;
    }

    .profile-actions .btn {
      padding: 8px 25px;
      border-radius: 50px;
      transition: all 0.3s ease;
    }

    .btn-message {
      color: white;
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      border: none;
    }

    .btn-message:hover {
      background: linear-gradient(135deg, #5910a8 0%, #1e60d3 100%);
      transform: translateY(-2px);
    }

    .btn-connect {
      border: 2px solid #6a11cb;
      color: #6a11cb;
    }

    .btn-connect:hover {
      background-color: #6a11cb;
      color: white;
    }

    .skills-container {
      margin-top: 25px;
    }

    .skill-tag {
      display: inline-block;
      padding: 5px 15px;
      margin: 5px;
      border-radius: 50px;
      background-color: #e9ecef;
      color: #495057;
      font-size: 14px;
      transition: all 0.3s ease;
    }

    .skill-tag:hover {
      background-color: #6a11cb;
      color: white;
      transform: translateY(-2px);
    }

    .tab-content {
      padding: 20px 0;
    }

    .tab-pane {
      animation: fadeIn 0.5s ease;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }

      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .activity-item {
      margin-bottom: 15px;
      padding-bottom: 15px;
      border-bottom: 1px solid #eee;
    }

    .activity-icon {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
      margin-right: 15px;
    }

    .activity-content {
      flex: 1;
    }

    .activity-time {
      font-size: 12px;
      color: #6c757d;
    }

    .edit-profile {
      position: absolute;
      top: 15px;
      right: 15px;
      background-color: rgba(255, 255, 255, 0.9);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: #333;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .edit-profile:hover {
      background-color: white;
      transform: scale(1.1);
    }
  </style>
</head>

<body>
  <%-include("navbar")-%>
  <script>
    // const token = localStorage.getItem("token");
    if (!token) {
      window.location.href = "/login";
    }
    let data = {};
    const fetchProfileData = async () => {
      try {
        const response = await fetch("/api/profile", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${token}`,
          },
        });
        if (response.ok) {
          data = await response.json();
          document.querySelector(".profile-name").textContent = data.user.name;
          document.querySelector("#profile-email").textContent = data.user.email;
          document.getElementById("profileName").value = data.user.name;
          document.getElementById("profileEmail").value = data.user.email;
          document.getElementById("activity").innerHTML =
            data.userURLs.map((url) => {
              return `
                    <div class="activity-item d-flex align-items-center flex-wrap">
                    <div class="activity-icon mb-2 mb-md-0">
                      <i class="fas fa-link"></i>
                    </div>
                    <div class="activity-content flex-grow-1">
                      <div class="d-flex justify-content-between flex-wrap">
                      <div class="url-info mb-2 mb-md-0">
                      <div class="url-original h5 text-info" style="font-size: 1rem;">${url.url}</div>
                      <div class="activity-time">
                      <span class="h6 font-bold text-black" style="font-size: 0.9rem;">Short URL : </span>
                      <a href="${window.location.origin}/${url.shortURL}" target="_blank" class="h6 text-success" rel="noopener noreferrer" style="font-size: 0.9rem;">
                        ${window.location.origin}/${url.shortURL}
                      </a>
                      <button class="btn btn-sm btn-outline-secondary ms-2" onclick="navigator.clipboard.writeText('${window.location.origin}/${url.shortURL}')">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard2" viewBox="0 0 16 16">
                          <path d="M3.5 2a.5.5 0 0 0-.5.5v12a.5.5 0 0 0 .5.5h9a.5.5 0 0 0 .5-.5v-12a.5.5 0 0 0-.5-.5H12a.5.5 0 0 1 0-1h.5A1.5 1.5 0 0 1 14 2.5v12a1.5 1.5 0 0 1-1.5 1.5h-9A1.5 1.5 0 0 1 2 14.5v-12A1.5 1.5 0 0 1 3.5 1H4a.5.5 0 0 1 0 1z"/>
                          <path d="M10 .5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V2a.5.5 0 0 0 .5.5h5A.5.5 0 0 0 11 2v-.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5"/>
                        </svg>
                      </button>
                      </div>
                      </div>
                      <div class="d-flex flex-column align-items-end">
                      <div class="url-clicks mb-2">
                      <span class="badge bg-primary h3">${url.clicks} Clicks</span>
                      </div>
                      ${url.clicks > 0 ? `
                      <a class="btn btn-sm btn-info" href="/page/analyze/${url._id}" style="height: 30px;">
                      View More
                      </a>` : ''}
                      <button class="btn btn-sm btn-danger mt-2" onclick="deleteURL('${url._id}')"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z"/>
                        <path d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z"/>
                      </svg></button>
                      </div>
                      </div>
                    </div>
                    </div>`;
            }).join('');
          if (data.userURLs.length === 0) {
            document.getElementById("activity").innerHTML = `<div class="alert alert-info">No URLs found</div>`;
          }

        } else {
          throw new Error("Failed to fetch profile data");
        }
      } catch (error) {
        console.error(error);
        alert("Failed to fetch profile data");
      }
    }
    fetchProfileData();

    const deleteURL = async (urlID)=>{
      try {
        const response = await fetch(`/api/url/${urlID}`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${localStorage.getItem("token")}`,
          },
        });
        if (response.ok) {
          alert("URL deleted successfully");
          fetchProfileData(); // Refresh the profile data after deletion
        } else {
          throw new Error("Failed to delete URL");
        }
      } catch (error) {
        console.error(error);
        alert("Failed to delete URL");
      }
    }
  </script>
  <div class="container py-5">
    <div class="row justify-content-center">
      <div class="col-lg-8">
        <div class="profile-card mb-4">
          <div class="profile-cover">
            <div class="edit-profile" id="editProfileBtn">
              <i class="fas fa-pencil-alt"></i>
            </div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="180" height="180" class="profile-avatar shadow">
              <circle cx="12" cy="12" r="10" fill="#6a11cb" />
              <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z" fill="#fff" />
            </svg>
          </div>
          
          <div class="profile-info">
            <h3 class="profile-name"></h3>
            <!-- email -->
            <p class="profile-email" id="profile-email"></p>

          </div>

          <ul class="nav nav-tabs justify-content-center gap-4" id="profileTabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button style="
                    border: none;
                    background-color: transparent;
                    padding: 5px;
                    &:hover {
                      color: #6a11cb;
                      font-weight: bold;
                    }
                    transition: all 0.2s ease;
                  " id="activity-tab" data-bs-toggle="tab" data-bs-target="#activity" type="button" role="tab" aria-controls="activity" aria-selected="false">
                All URLs
              </button>
            </li>

          </ul>

          <div class="tab-content px-4" id="profileTabsContent">
            <div class="tab-pane fade show active" id="activity" role="tabpanel" aria-labelledby="activity-tab">
              <div id="activity "></div>


            </div>
          </div>
        </div>
      </div>

      <!-- Edit Profile Modal -->
      <div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editProfileModalLabel">
                Edit Profile
              </h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="editProfileForm">
                <div class="mb-3">
                  <label for="profileName" class="form-label">Name</label>
                  <input type="text" class="form-control" id="profileName" value="" />
                </div>
                <div class="mb-3">
                  <label for="profileTitle" class="form-label">Email I'D</label>
                  <input type="email" class="form-control" id="profileEmail" value="" />
                </div>

            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                Cancel
              </button>
              <button type="button" class="btn btn-primary" id="saveProfileBtn">
                Save Changes
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap & jQuery -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>

    <script>
      // Initialize Bootstrap components
      const tooltipTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="tooltip"]')
      );
      tooltipTriggerList.map(function(tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
      });

      // Profile edit functionality
      document
        .getElementById("editProfileBtn")
        .addEventListener("click", function() {
          const editProfileModal = new bootstrap.Modal(
            document.getElementById("editProfileModal")
          );
          editProfileModal.show();
        });

      document
        .getElementById("saveProfileBtn")
        .addEventListener("click", function() {
          // Get values from form
          const newName = document.getElementById("profileName").value;
          const newTitle = document.getElementById("profileTitle").value;
          const newBio = document.getElementById("profileBio").value;

          // Update profile with new values
          document.querySelector(".profile-name").textContent = newName;
          document.querySelector(".profile-title").textContent = newTitle;
          document.querySelector(".profile-bio").textContent = newBio;

          // Close the modal
          const editProfileModal = bootstrap.Modal.getInstance(
            document.getElementById("editProfileModal")
          );
          editProfileModal.hide();

          // Show a success message (could be enhanced with a toast notification)
          alert("Profile updated successfully!");
        });
    </script>

    <%-include("footer")-%>
</body>

</html>